# -*- mode: ruby -*-
# vi: set ft=ruby :

VM_PRIVATE_IP="192.168.56.151"
VM_HOSTNAME="phpstudy"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/centos-7.2"



  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false



  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.56.10"
  config.vm.network "private_network", ip: VM_PRIVATE_IP, auto_config:false
  config.vm.hostname = VM_HOSTNAME
  config.hostmanager.enabled = false
  config.hostmanager.manage_guest = true
  config.hostmanager.manage_host = true

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "..", "/phpstudy"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     # vb.gui = true

     # Customize the amount of memory on the VM:
     vb.name = VM_HOSTNAME
     vb.memory = "1024"
     vb.cpus = "2"
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  
  
  # guest additions
  config.vbguest.auto_update = false
  #config.vbguest.no_remote = true
  
  
  ######################
  # provision
  ######################

  config.vm.provision "shell", inline: <<-SHELL
    echo "start provision"
  SHELL

  config.vm.provision :hostmanager
  
  # kernel
  config.vm.provision "shell", inline: <<-SHELL

    #echo "provision: yum update kernel"
    #sudo yum -y update kernel
    #echo "provision: yum install kernel-devel kernel-headers"
    #sudo yum -y install kernel-devel kernel-headers dkms gcc gcc-c++

    echo "provision: append KERN_DIR to .bash_profile"
    echo '' >> ~/.bash_profile
    echo 'KERN_DIR="/usr/src/kernels/$(ls -t1 /usr/src/kernels/ | head -n 1)"' >> ~/.bash_profile
    echo 'export KERN_DIR' >> ~/.bash_profile

    . ~/.bash_profile
    echo "KERN_DIR="$KERN_DIR

    #sudo /usr/lib/VBoxGuestAdditions/vboxadd setup
    #sudo systemctl enable vboxadd.service

  SHELL
  #config.vm.provision "shell", inline: "echo reload"
  #config.vm.provision "reload"

  # tools
  config.vm.provision "shell", inline: <<-SHELL

    echo "provision: yum install tools"
    sudo yum -y install dkms gcc gcc-c++
    sudo yum -y update binutils make perl
    sudo yum -y install yum-utils device-mapper-persistent-data lvm2
    #sudo yum -y install epel-release
    #sudo yum -y install python-pip
    #sudo yum-config-manager --disable epel

    #sudo pip install pip --upgrade
    #sudo pip install --upgrade --user awscli

    #AWSCLIPATH=$(find / -name aws | grep '/aws$' | head -n 1 | awk '{gsub("/aws","",$0); print $0}')
    #sudo sed -i -e "/PATH=/a\\PATH=\\$PATH:$AWSCLIPATH" ~/.bash_profile
    #. ~/.bash_profile
    #aws --version

  SHELL

  # network
  config.vm.provision "shell", inline: <<-SHELL

    echo "provision: yum install net-tools"
    sudo yum -y install net-tools

    echo "provision: network"
    sudo nmcli con add type ethernet ifname enp0s8 con-name enp0s8
    sudo nmcli con mod enp0s8 ipv4.method "manual" ipv4.addresses "#{VM_PRIVATE_IP}/24"
    sudo nmcli con reload enp0s8
    
    echo "provision: stop firewall"
    systemctl stop firewalld
    systemctl disable firewalld
    
    echo "provision: change timezone"
    sudo timedatectl set-timezone "Asia/Tokyo"
    sudo timedatectl
    
    echo "provision: change locale"
    sudo localectl set-locale LANG=ja_JP.utf8
    sudo localectl set-keymap jp106
    sudo localectl status

  SHELL

  # middleware
  config.vm.provision "shell", inline: <<-SHELL

    #apache
    echo "provision: yum install httpd-2.4.6"
    sudo yum -y install httpd-2.4.6
    sudo mv /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.original
    sudo ln -s /phpstudy/vagrant/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf
    sudo ls -l /etc/httpd/conf/httpd.conf
    sudo ln -s /phpstudy/vagrant/httpd/conf.d/vhosts.conf /etc/httpd/conf.d/vhosts.conf
    sudo ls -l /etc/httpd/conf.d/vhosts.conf
    sudo ln -s /phpstudy/application /var/www/application
    sudo apachectl configtest
    sudo systemctl enable httpd.service
    sudo systemctl start httpd.service

    #MariaDB関連ライブラリの確認と削除
    sudo yum remove -y mariadb-libs
    rm -rf /var/lib/mysql/

    #MySQL8.0
    echo "provision: rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm"
    echo "provision: yum install -y mysql-community-server"
    sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
    sudo yum install -y mysql-community-server php-mysql
    sudo mysqld --version
    sudo mv /etc/my.cnf /etc/my.cnf.original
    sudo ln -s /phpstudy/vagrant/mysql/my.cnf /etc/my.cnf
    sudo systemctl enable mysqld
    sudo systemctl start mysqld
    sudo systemctl status mysqld

    #PHP5.4
    echo "provision: yum install php-5.4.16-42.el7"
    sudo yum -y install php
    #sudo yum -y install php-5.4.16-42.el7
    sudo yum -y install php-pear php-devel php-pdo php-mbstring php-pecl-zip php-fpm php-mysql php-xml php-bcmath php-pecl-apc php-soap php-pecl-xdebug php-gd
    sudo mv /etc/php.ini /etc/php.ini.original
    sudo ln -s /phpstudy/vagrant/php/php.ini /etc/php.ini

    #Smarty
    sudo ln -s /phpstudy/libs /var/www/libs
    

  SHELL

  config.vm.provision "shell", inline: "echo reload"
  config.vm.provision "reload"

  config.vm.provision "shell", inline: "echo end provision"

  # always
  config.vm.provision "shell", run: "always", inline: <<-SHELL
    sudo systemctl start httpd
    sudo systemctl status httpd
  SHELL

end
